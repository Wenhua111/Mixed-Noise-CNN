#! /usr/bin/env python

import os
import time
import datetime
import shelve

import numpy as np
import tensorflow as tf
from psnr import psnr
from scipy.io import loadmat, savemat
from denoiser_nn import denoiser_net_pool2 as denoiser_net

os.environ['CUDA_VISIBLE_DEVICES']='-1' #CPU ONLY MODE

file_name = 'butter_sign.mat' #file generated by CAI.m

#Setting Noise Parameters
sigma = 20
p = 0.30


if p==0.30:
    pp = '30'
elif p==0.15:
    pp = '15'
elif pp==0.00:
    pp = '00'
else:
    print("PP WAS NOT CHOSEN! ERROR!!!")

#loading the image    
mat_f = loadmat(file_name)
true = mat_f['img'] #original image
img = mat_f['imm256'] #Cai's processed Image
M,N = img.shape
img = img.reshape(1,M,N,1)


     
model_file = 'sigma'+str(sigma)+'p'+pp+'.mat' #name of the model file to be used
load_from = os.path.join('models',model_file)

session_conf = tf.ConfigProto(
    allow_soft_placement=True,
    log_device_placement=False
)

sess=tf.Session(config=session_conf)

cnn = denoiser_net(is_load=True,
                    filename=load_from)
global_step = tf.Variable(0, name="global_step", trainable=False)
sess.run(tf.global_variables_initializer())


out,_ = sess.run([cnn.out, global_step],feed_dict={cnn.input_x:img})
out = out.reshape(M/2,N/2)
out[out>1] = 1
out[out<0] = 0

mat_f['cnn']=out
savemat(file_name,mat_f) #mat_f now contains the cnn denoised image as well.

print("PSNR: ")
print(psnr(out,true,1.0))


